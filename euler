#!/bin/bash

# Absolute path to the binary directory, so that it can be accessed anywhere.
#   Source: https://stackoverflow.com/questions/59895/
src="${BASH_SOURCE[0]}"
while [ -h "$src" ]; do
  bin="$(cd -P "$(dirname "$src")" && pwd)"
  src="$(readlink "$src")"
  [[ $src != /* ]] && src="$bin/$src"
done
bin="$(cd -P "$(dirname "$src")" && pwd)/bin"

# Versioning information.
version="1.0-beta"

# Total number of problems in Project Euler so far.
num=615

# Print out the help message with information about flags/options.
print_options () {
  echo -e \
"Usage: euler <options> <problem number>
where possible options include:
  --help                     Print a synopsis of standard options
  -v, --version              Version information
  -r, --run                  Run and print the answer to <problem number>
  -s, --run-solved           Run and print answers to all solved problems so far
  -l, --list-solved          List all of the problems solved so far"
  exit 0
}

# Print out the version message and licensing information.
print_version () {
  echo -e "euler $version"
}

# Run the specified problem.
run() {
  problems=("$@")
  for prob in "${problems[@]}"; do
    if [ "$prob" -eq 0 ] || [ "$prob" -gt "$num" ]; then
      echo -e "Problem $prob is not a problem on Project Euler."
    else
      if [ -f "$bin/$prob" ]; then
        "$bin/$prob"
      else
        echo -e "Problem $prob: This problem has not been solved yet."
      fi
    fi
  done
}

# List all of the problems solved so far in a nice table format.
listSolved() {
  tcols=$(tput cols)
  wrap=$((($tcols - 5)/4))

  problems=()
  for file in $bin/*; do
    base=$(basename $file)
    problems+=("$base")
  done

  echo -e "List of solved problems:  (p = ${wrap}r + c)"
  echo -e ""

  min=$([ "$num" -lt "$wrap" ] && echo "$num" || echo "$wrap")

  for ((i = 0; i < "$min"; i++)); do
    if [ "$i" -eq 0 ]; then
      echo -n -e "     "
    else
      echo -n -e " "
    fi
    if [ "$i" -lt 10 ]; then
      echo -n -e "00$i"
    else
      echo -n -e "0$i"
    fi
  done
  echo -e ""

  for ((i = 0; i < "$min"; i++)); do
    if [ "$i" -eq 0 ]; then
      echo -n -e "    "
      continue
    elif [ "$i" -eq 1 ]; then
      echo -n -e "    ┌"
    else
      echo -n -e "┬"
    fi
    echo -n -e "───"
  done
  echo -e "┐"

  rows=$((($num+$wrap-1)/$wrap))
  maxcol=$(($num-$wrap*($rows-1)+1))

  for ((p = 0; p < "$rows"; p++)); do

    if [ "$p" -lt 10 ]; then
      echo -n -e " 0$p "
    else
      echo -n -e " $p "
    fi

    for ((q = 0; q < "$wrap"; q++)); do

      n=$(($wrap * $p + $q))

      if [ "$n" -eq "$num" ]; then
        q=$(($wrap - 1))
      fi

      if [ "$p" -eq 0 ] && [ "$q" -eq 0 ]; then
        echo -n -e "    "
      else
        echo -n -e "│ "

        completed=false

        if [ "${#problems[@]}" -ne 0 ]; then
          for prob in "${problems[@]}"; do
            if [ "$n" -eq "$prob" ]; then
              completed=true
              break
            fi
          done
        fi

        if [ "$completed" = true ]; then
          echo -n -e "·"
        else
          echo -n -e " "
        fi
        
        echo -n -e " "
      fi
    done

    echo -e "│"

    for ((q = 0; q < "$wrap"; q++)); do

      n=$(($wrap * $p + $q))

      if [ "$n" -eq "$num" ]; then
        q=$(($wrap - 1))
      fi

      if [ "$rows" -eq 1 ]; then
        if [ "$q" -eq 0 ]; then
          echo -n -e "        "
        elif [ "$q" -eq 1 ]; then
          echo -n -e "└───"
        else
          echo -n -e "┴───"
        fi
      elif [ "$p" -eq $(($rows - 1)) ]; then
        if [ "$q" -eq 0 ]; then
          echo -n -e "    └───"
        else
          echo -n -e "┴───"
        fi
      elif [ "$p" -eq $(($rows - 2)) ] && [ "$q" -gt "$maxcol" ]; then
        echo -n -e "┴───"
      elif [ "$p" -eq 0 ]; then
        if [ "$q" -eq 0 ]; then
          echo -n -e "    ┌───"
        else
          echo -n -e "┼───"
        fi
      else
        if [ "$q" -eq 0 ]; then
          echo -n -e "    ├───"
        else
          echo -n -e "┼───"
        fi
      fi
    done

    if [ "$rows" -eq 1 ]; then
      echo -e "┘"
    elif [ "$p" -eq $(($rows - 1)) ]; then
      echo -e "┘"
    elif [ "$p" -eq $(($rows - 2)) ] && [ "$q" -gt "$maxcol" ]; then
      echo -e "┘"
    elif [ "$p" -eq 0 ]; then
      echo -e "┤"
    else
      echo -e "┤"
    fi
  done
}

# Run all of the solved problems so far.
runSolved() {
  for file in $bin/*; do
    base=$(basename $file)
    if [ "$base" -ne 0 ]; then
      run "$base"
    fi
  done
}

# Initialization of arguments that may be fed to the CLI.
#   -run: Whether or not the run option was specified.
#   -lst: Whether or not the list-solved option was specified.
#   -rs:  Whether or not the run-solved option was specified.
run=0
lst=0
rs=0
args=()

# Reading the arguments to the CLI and interpreting them using a shift parser.
while true; do
  case "$1" in
    "")
      break
      ;;
    --help)
      print_options
      exit 0
      ;;
    --version|-v)
      print_version
      exit 0
      ;;
    --run|-r)
      run=1
      shift
      ;;
    --run-solved|-s)
      rs=1
      shift
      ;;
    --list-solved|-l)
      lst=1
      shift
      ;;
    *)
      if [[ "$1" == -* ]]; then
        echo -e "euler: invalid flag: $1"
        echo -e "Usage: euler <options> <problem number>"
        echo -e "use --help for a list of possible options"
        exit 1
      else
        args+=("$1")
        shift
      fi
      ;;
  esac
done

# If problems were given, run the command. Otherwise, print help.
if [ "$run" -eq 1 ] && [ "${#args[@]}" -eq 0 ]; then
  echo "No problems to run were specified."
  print_options
  exit 1
else
  # No options specified. Default behavior is temporary until compiler is done.
  if [ "$run" -ne 1 ] && [ "$lst" -ne 1 ] && [ "$rs" -ne 1 ]; then
    echo -e "euler: no options specified."
    echo -e "Usage: euler <options> <problem number>"
    echo -e "use --help for a list of possible options"
    exit 1
  else
    # Print out the list of solved problems.
    if [ "$lst" -eq 1 ]; then
      listSolved
      exit 0
    fi
    # Run all of the solved problems so far.
    if [ "$rs" -eq 1 ]; then
      runSolved
      exit 0
    fi
    # Run the specified problem.
    if [ "$run" -eq 1 ]; then
      run "${args[@]}"
    fi
  fi
fi